-- File generated by the BNF Converter (bnfc 2.9.5).

-- Templates for pattern matching on abstract syntax

{-# OPTIONS_GHC -fno-warn-unused-matches #-}

module SkelBnfc where

import Prelude (($), Either(..), String, (++), Show, show)
import qualified AbsBnfc

type Err = Either String
type Result = Err String

failure :: Show a => a -> Result
failure x = Left $ "Undefined case: " ++ show x

transInteger :: AbsBnfc.Integer -> Result
transInteger x = case x of
  AbsBnfc.Integer string -> failure x

transVar :: AbsBnfc.Var -> Result
transVar x = case x of
  AbsBnfc.Var string -> failure x

transProgram :: AbsBnfc.Program -> Result
transProgram x = case x of
  AbsBnfc.Prog stmts -> failure x

transStmt :: AbsBnfc.Stmt -> Result
transStmt x = case x of
  AbsBnfc.Assign var expr -> failure x
  AbsBnfc.Print expr -> failure x

transExpr :: AbsBnfc.Expr -> Result
transExpr x = case x of
  AbsBnfc.EAdd expr term -> failure x
  AbsBnfc.ESub expr term -> failure x
  AbsBnfc.ESimp term -> failure x

transTerm :: AbsBnfc.Term -> Result
transTerm x = case x of
  AbsBnfc.TMul term factor -> failure x
  AbsBnfc.TDiv term factor -> failure x
  AbsBnfc.TSimp factor -> failure x

transFactor :: AbsBnfc.Factor -> Result
transFactor x = case x of
  AbsBnfc.FInt integer -> failure x
  AbsBnfc.FVar var -> failure x
  AbsBnfc.FPar expr -> failure x
